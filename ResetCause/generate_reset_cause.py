import os
from itertools import chain, dropwhile, takewhile


def insert(path, block, id):
    with open(path) as file:
        lines = file.readlines()

    start_key = f"// Start of code block #{id} generated by {os.path.basename(__file__)}\n"
    end_key = f"// End of code block #{id} generated by {os.path.basename(__file__)}\n"

    lines_before_block = list(
        chain(
            takewhile(lambda l: not l.lstrip().startswith(start_key), lines),
            [next(line for line in lines if line.lstrip().startswith(start_key))],
        )
    )

    lines_after_block = list(dropwhile(lambda l: not l.lstrip().startswith(end_key), lines))

    if lines_before_block == lines:
        raise Exception(f"Error: Cannot find {start_key.strip()} in {path}")

    if lines_after_block == lines:
        raise Exception(f"Error: Cannot find {end_key.strip()} in {path}")

    with open(path, "w") as file:
        for line in lines_before_block:
            file.write(line)

        file.write(block)

        for line in lines_after_block:
            file.write(line)


# Get enum values
path = "../../config/default/peripheral/rcon/plib_rcon.h"

if not os.path.exists(path):
    raise Exception("Please enable RCON in MPLAB Harmony")

with open(path) as file:
    lines = file.readlines()

prefix = "RCON_RESET_CAUSE_"

enums = [prefix + line.split(prefix)[1].split(" ")[0] for line in lines if prefix in line]

# Insert code in ResetCauseGet()
path = "ResetCause.c"

code = "    const RCON_RESET_CAUSE mask = " + " | ".join(enums) + ";\n"

insert(path, code, "0")

code = "".join(
    [
        f"""\
    if ((cause & {e}) != 0) {{
        printf("{e.replace("RCON_RESET_CAUSE_", "")} ");
    }}
"""
        for e in enums
    ]
)

insert(path, code, "1")
