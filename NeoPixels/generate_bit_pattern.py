import os

map_lines = []

for value in range(256):
    bits = "{0:08b}".format(value)

    reordered_bits = bits[6] + bits[7] + bits[4] + bits[5] + bits[2] + bits[3] + bits[0] + bits[1]

    map_lines.append(f"        0x{reordered_bits.replace('0', '8').replace('1', 'E')},")

with open("BitPattern.h", "w") as file:
    file.write(f"""\
// This file was generated by {os.path.basename(__file__)}

#include <stdint.h>

typedef struct {{
    uint32_t green;
    uint32_t red;
    uint32_t blue;
}} __attribute__((__packed__)) BitPattern;

static inline __attribute__((always_inline)) BitPattern BitPatternFrom(const uint8_t red, const uint8_t green, const uint8_t blue) {{
    static const uint32_t map[] = {{
{"\n".join(map_lines)}
    }};
    const BitPattern bitBattern = {{
        .green = map[green],
        .red = map[red],
        .blue = map[blue],
    }};
    return bitBattern;
}}
""")
